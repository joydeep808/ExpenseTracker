"use server"
import { auth } from "@/auth"
import { SessionUser } from "@/types/index.types"



let  userSession:SessionUser = {
  _id:"" , 
  email :"",
  expiresAt:0,
  isVerifyed:false,
  name:"",
  refreshToken:"",
   role:["USER"],
}
export const getUserFromSession = async()=>{
   console.log("email",userSession.email)
 
   if (userSession.email === "") {
     const userAuth  = await auth() as SessionUser |null
     if (!userAuth) return {isSuccess:false , userSession}
 
     userSession._id = userAuth._id,
     userSession.email = userAuth.email,
     userSession.role = userAuth.role,
     userSession.refreshToken = userAuth.refreshToken,
     userSession.expiresAt = userAuth.expiresAt,
     userSession.isVerifyed = userAuth.isVerifyed
     console.log("userSession set" )
     return {isSuccess:true , userSession}
 
   }
   if (new Date(userSession.expiresAt) < new Date()) {
    console.log("new token assigned")
     const userAuth  = await auth()
     if (!userAuth) return null
     userSession = userAuth.user
     return {isSuccess:true , userSession}
   }
   console.log("directly return")
   return {isSuccess:true , userSession}
 
 
}


////




export const RedisHandler = async()=>{
  const userAuth = await getUserFromSession()
  if (!userAuth || userAuth?.isSuccess === null) {
    await cookies().delete("__Secure-authjs.session-token")
    return {success:false , err:"Invalid user"}
  }
  const userKey = userAuth.userSession.email
  const pipeline = RedisClient.pipeline();
 const result =await RedisClient.get(userKey)
 const foundUser = result
 if( foundUser === null) {
   pipeline.set(userKey , 1).expire(userKey , 60)
  await pipeline.exec()
  return {success:null , userAuth:userAuth.userSession}
 }
 if (Number(foundUser) > 20) {
  return {success:false , err:"Limit Excedeed" }
 }
 else {
   await RedisClient.incrby(userKey , 1)
  return {success:true, userAuth:userAuth.userSession}
 }

}









export const setUserinRedis = async(email:string)=>{
  await RedisClient.set(email , 1)
  await RedisClient.expire(email , 1 * 60 )
}
export const incrementValue = async(email:string)=>{
 try {
    const user = await RedisClient.get(email)
    if (!user) {
      await setUserinRedis(email)
      return "set "
    }
    if (user > "5") {
      return new ApiResponse(400 , "Please try again sometimes" , false).response()
    }
    await RedisClient.incrby(email , 1)
    return "increment"
 } catch (error) {
  console.log("error")
  return false
 }
}